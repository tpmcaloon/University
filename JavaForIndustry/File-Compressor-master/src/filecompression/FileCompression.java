/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *
 */
package filecompression;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Sourav
 */
public class FileCompression extends javax.swing.JFrame {

    
    private String src,dest,src_name,dest_name;
        Huffman obj;//Object of Huffman.java
        static int k1=0,k2=0;
    //Constructor of FileCompression class
    public FileCompression() {
        initComponents();
        setSize(520, 370);
        obj=new Huffman();
        src=dest="";
        sourcefield.setEditable(false);
        destfield.setEditable(false);
        jButton5.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        destfield = new javax.swing.JTextField();
        sourcefield = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Source File:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Destination Folder:");

        destfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destfieldActionPerformed(evt);
            }
        });

        sourcefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourcefieldActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("File Compressor-@author:Sourav");

        jButton3.setText("View Codes");
        jButton3.setMaximumSize(new java.awt.Dimension(91, 23));
        jButton3.setMinimumSize(new java.awt.Dimension(91, 23));
        jButton3.setPreferredSize(new java.awt.Dimension(95, 25));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Compress");
        jButton4.setMaximumSize(new java.awt.Dimension(91, 23));
        jButton4.setMinimumSize(new java.awt.Dimension(91, 23));
        jButton4.setPreferredSize(new java.awt.Dimension(95, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Decompress");
        jButton5.setPreferredSize(new java.awt.Dimension(95, 25));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("*Large files may take some time to get compressed/decompressed.Please be patient after clicking the button :)");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("A Simple Text File Compression Programm using Huffman's Codes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(destfield, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                    .addComponent(sourcefield))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourcefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(destfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void destfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destfieldActionPerformed

    private void sourcefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourcefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourcefieldActionPerformed
//Select source file
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
                JFileChooser jFileChooser = new JFileChooser();
                jFileChooser.setDialogTitle("Select source file");
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files(*.txt)", "txt", "text");
                jFileChooser.setFileFilter(filter);
                int status = jFileChooser.showOpenDialog(FileCompression.this);
                if (status == JFileChooser.APPROVE_OPTION) 
                {
                    File selectedFile = jFileChooser.getSelectedFile();
                    src = selectedFile.getAbsolutePath();
                    src_name=selectedFile.getName();
                    sourcefield.setText(src);
                    try 
                    {
                        obj.readchar(src);
                        obj.buildCanonicalCodes();
                    } 
                    catch (IOException ex) 
                    {
                        Logger.getLogger(FileCompression.class.getName()).log(Level.SEVERE, null, ex);
                    }  
                }
            
    }//GEN-LAST:event_jButton1ActionPerformed
//Select destination file.Default:Output.txt
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

                JFileChooser jFileChooser = new JFileChooser("Output.txt");
                jFileChooser.setDialogTitle("Select destination file");
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files(*.txt)", "txt", "text");
                jFileChooser.setFileFilter(filter);
                jFileChooser.setSelectedFile(new File("Output.txt"));
                int status = jFileChooser.showSaveDialog(FileCompression.this);
                if (status == JFileChooser.APPROVE_OPTION) 
                {
                    File file = jFileChooser.getSelectedFile();           
                    if(!file.getPath().toLowerCase().endsWith(".txt"))
                        file = new File(file.getPath()+".txt");      
                    dest_name=file.getName();
                    dest = file.getAbsolutePath();
                    destfield.setText(dest);
                }
                    
                   
    }//GEN-LAST:event_jButton2ActionPerformed
/*
View Codes Button onClickfunction:
displays the canonical huffman codes for the corresponding characters.
*/
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(sourcefield.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please select a source file","Error",JOptionPane.OK_OPTION);
            return;
        }
        else
        {        
            JTextArea area=new JTextArea();
            area.setEditable(false);
            JScrollPane scrlpane=new JScrollPane(area);
            scrlpane.setPreferredSize(new Dimension(250,200));
            PrintStream printStream = new PrintStream(new CustomOutputStream(area));
            System.setOut(printStream);
            System.setErr(printStream);
            obj.display();
            JOptionPane.showMessageDialog(null, scrlpane, "HUFFMAN CODES",JOptionPane.INFORMATION_MESSAGE);
        } 
    }//GEN-LAST:event_jButton3ActionPerformed
/*
Compress Button onClickfunction:
compresses the source file to the destination file and displays the output in a dialog.
*/
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if(sourcefield.getText().isEmpty())
            JOptionPane.showMessageDialog(null,"Please select a source file","Error",JOptionPane.OK_OPTION);  
        else if(destfield.getText().isEmpty())
            JOptionPane.showMessageDialog(null,"Please select a destination file","Error",JOptionPane.OK_OPTION);
           
        else
        {   
            //A custom Dialog to show compression status 
            JButton ok = new JButton("OK");ok.setMaximumSize(new Dimension(150,23));    
            JTextArea area=new JTextArea("Compressing.......");
            area.setEditable(false);
            JScrollPane scrlpane=new JScrollPane(area);
            scrlpane.setPreferredSize(new Dimension(200,200));
            JPanel panel = new JPanel(new BorderLayout(5, 5));
            area.setBackground(panel.getBackground());
            panel.add(scrlpane, BorderLayout.NORTH);
            panel.add(ok,BorderLayout.SOUTH);
            panel.setBorder(BorderFactory.createEmptyBorder(11, 11, 11, 11));
            final JDialog dialog = new JDialog();
            dialog.getContentPane().add(panel);
            dialog.setResizable(false);
            dialog.pack();
            dialog.setTitle("Compress");
            dialog.setSize(500, dialog.getHeight());
            dialog.setLocationRelativeTo(null);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.setAlwaysOnTop(false);
            dialog.setVisible(true);
            area.setBackground(panel.getBackground());
            ok.setEnabled(false);
            //SwingWorker to perform compression in background
            SwingWorker worker= new SwingWorker() 
            {
                long start,end;
                @Override
                protected Object doInBackground() throws Exception 
                {
                     try 
                    {
                        //Ouputstream to text area
                        PrintStream printStream = new PrintStream(new CustomOutputStream(area));
                        System.setOut(printStream);
                        System.setErr(printStream);
                        start=new Date().getTime();
                        obj.encode_data(src,dest);
                        end=new Date().getTime();
                     } 
                    catch (IOException ex) 
                    {
                        Logger.getLogger(FileCompression.class.getName()).log(Level.SEVERE, null, ex);
                    }
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }   
                @Override
                protected void done() 
                {
                    //Close Dialog on click of OK button
                    ok.setEnabled(true);
                    ok.addActionListener(new ActionListener()
                    {
                        public void actionPerformed(ActionEvent event)
                        {
                            dialog.dispose();
                        }
                    });
                    area.append("\n\n\nFinished Compressing.......\nTime: "+(double)((end-start)/1000.0)+" secs");
                }
            };
            worker.execute();
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed
/*
Decompress Button onClickfunction:
decompresses the source file to the destination file and displays the output in a dialog.
*/
//decode fuunction is still under development.
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(sourcefield.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please select a source file","Error",JOptionPane.OK_OPTION);
            
        }
        else if(destfield.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Please select a destination file","Error",JOptionPane.OK_OPTION);
            
        }
        else
        {
            JButton ok = new JButton("OK");ok.setMaximumSize(new Dimension(150,23));    
            JTextArea area=new JTextArea("Decompressing.......");
            area.setEditable(false);
            JScrollPane scrlpane=new JScrollPane(area);
            scrlpane.setPreferredSize(new Dimension(200,200));
            JPanel panel = new JPanel(new BorderLayout(5, 5));
            area.setBackground(panel.getBackground());
            panel.add(scrlpane, BorderLayout.NORTH);
            panel.add(ok,BorderLayout.SOUTH);
            panel.setBorder(BorderFactory.createEmptyBorder(11, 11, 11, 11));
            final JDialog dialog = new JDialog();
            dialog.getContentPane().add(panel);
            dialog.setResizable(false);
            dialog.pack();
            dialog.setTitle("Decompress");
            dialog.setSize(500, dialog.getHeight());
            dialog.setLocationRelativeTo(null);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.setAlwaysOnTop(false);
            dialog.setVisible(true);
            area.setBackground(panel.getBackground());
            ok.setEnabled(false);
            SwingWorker worker= new SwingWorker() {
                long start,end;
                @Override
                protected Object doInBackground() throws Exception {
                     try 
                    {
                        //Ouputstream to text area
                        PrintStream printStream = new PrintStream(new CustomOutputStream(area));
                        System.setOut(printStream);
                        System.setErr(printStream);
                        start=new Date().getTime();
                        obj.decode_data(src,dest);
                        end=new Date().getTime();
                     } 
            catch (Exception ex) {
                Logger.getLogger(FileCompression.class.getName()).log(Level.SEVERE, null, ex);
            }
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    
                }
                
             @Override
            protected void done() {
                //Close Dialog on click of OK button
                ok.setEnabled(true);
                ok.addActionListener(new ActionListener()
            {
            public void actionPerformed(ActionEvent event)
            {
               dialog.dispose();
            }
            });
                area.append("\n\n\nFinished Decompressing.......\nTime: "+(double)((end-start)/1000.0)+" secs");
            }
            };
            worker.execute(); 
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileCompression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileCompression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileCompression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileCompression.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileCompression().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField destfield;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField sourcefield;
    // End of variables declaration//GEN-END:variables
}
//Class for directing the Ouputstream to a JTextArea
class CustomOutputStream extends OutputStream {
    private JTextArea textArea;
     
    public CustomOutputStream(JTextArea textArea) 
    {
        this.textArea = textArea;
    }
     
    @Override
    public void write(int b) throws IOException {
        // redirects data to the text area
        textArea.append(String.valueOf((char)b));
        // scrolls the text area to the end of data
        textArea.setCaretPosition(textArea.getDocument().getLength());
    }
}




